	Rat in a Maze





    //{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    public:
    bool issafe(int newx,int newy,vector<vector<int>>&vis, vector<vector<int>>&m,int n)
    {
        if((newx>=0 && newx<n) && (newy>=0 && newy<n) && (vis[newx][newy]!=1) &&(m[newx][newy]==1))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    void solve(int x,int y,vector<vector<int>>&m,int n,vector<string>&ans,vector<vector<int>>&vis,string path)
    {
        if(x==n-1 && y==n-1)
        {
            ans.push_back(path);
            return;
        }
        vis[x][y]=1;
         int newx=x+1;
         int newy=y;
         if(issafe(newx,newy,vis,m,n))
         {
             path.push_back('D');
             solve(newx,newy,m,n,ans,vis,path);
             path.pop_back();
         }
         
          newx=x;
          newy=y-1;
         if(issafe(newx,newy,vis,m,n))
         {
             path.push_back('L');
             solve(newx,newy,m,n,ans,vis,path);
             path.pop_back();
         }
         
          newx=x;
          newy=y+1;
         if(issafe(newx,newy,vis,m,n))
         {
             path.push_back('R');
             solve(newx,newy,m,n,ans,vis,path);
             path.pop_back();
         }
         
          newx=x-1;
          newy=y;
         if(issafe(newx,newy,vis,m,n))
         {
             path.push_back('U');
             solve(newx,newy,m,n,ans,vis,path);
             path.pop_back();
         }
         vis[x][y]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
                 vector<string>ans;
         vector<vector<int>>vis(n,vector<int>(n,0));
         string path="";
         if(m[0][0]==0)
         {
             return ans;
         }
         solve(0,0,m,n,ans,vis,path);
         sort(ans.begin(),ans.end());
         return ans;

    }
};

    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends